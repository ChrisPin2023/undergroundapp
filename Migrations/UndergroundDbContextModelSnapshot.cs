// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.DataBase;

#nullable disable

namespace underground.api.Migrations
{
    [DbContext(typeof(UndergroundDbContext))]
    partial class UndergroundDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Entities.Contacto", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailPessoal")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("EmailTrabalho")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumTelefonePessoal")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("NumTelefoneTrabalho")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<string>("NumWatsapp")
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("Tb_Contacto");
                });

            modelBuilder.Entity("Models.Entities.Dador", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CodDador")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Tb_Dador");
                });

            modelBuilder.Entity("Models.Entities.Endereco", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BairroDistrito")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipio")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumCasa")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Rua")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Endereco");
                });

            modelBuilder.Entity("Models.Entities.Entrada", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gsanguineo")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<int>("Qtd")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Entrada");
                });

            modelBuilder.Entity("Models.Entities.Hospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NomeHospital")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Servicos")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Hospital");
                });

            modelBuilder.Entity("Models.Entities.Medico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Especialidade")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NumOdem")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Tb_Medico");
                });

            modelBuilder.Entity("Models.Entities.Naturalidade", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("BairroDistrito")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Municipio")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NumCasa")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Pais")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Provincia")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Rua")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.HasKey("Id");

                    b.ToTable("Tb_Naturalidade");
                });

            modelBuilder.Entity("Models.Entities.Paciente", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estado")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Patologia")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Tb_Paciente");
                });

            modelBuilder.Entity("Models.Entities.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Carater")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoPedido")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<Guid>("HospitalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("HospitalId");

                    b.ToTable("Tb_Pedido");
                });

            modelBuilder.Entity("Models.Entities.Pessoa", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime2");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("EnderecoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasColumnType("nvarchar(1)");

                    b.Property<string>("GrupoSanguineo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Idade")
                        .HasColumnType("int");

                    b.Property<Guid>("NaturalidadeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("NomePessoa")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumIdentificao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Profissao")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EnderecoId");

                    b.HasIndex("NaturalidadeId");

                    b.ToTable("Tb_Pessoa");
                });

            modelBuilder.Entity("Models.Entities.Saida", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PedidoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QtdBolsas")
                        .HasMaxLength(15)
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.ToTable("Tb_Saida");
                });

            modelBuilder.Entity("Models.Entities.Stock", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataEntrada")
                        .HasMaxLength(8)
                        .HasColumnType("datetime2");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DataSaida")
                        .HasMaxLength(8)
                        .HasColumnType("datetime2");

                    b.Property<int>("QtdEntrada")
                        .HasColumnType("int");

                    b.Property<int>("QtdMinima")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<int>("QtdSaida")
                        .HasMaxLength(30)
                        .HasColumnType("int");

                    b.Property<Guid>("SaidaId")
                        .HasMaxLength(30)
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SaidaId")
                        .IsUnique();

                    b.ToTable("Tb_Stock");
                });

            modelBuilder.Entity("Models.Entities.Tecnico", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DataCadastro")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DataRevisao")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FuncaoExtra")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<Guid>("PessoaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RefTecnico")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId")
                        .IsUnique();

                    b.ToTable("Tb_Tecnico");
                });

            modelBuilder.Entity("Models.Entities.Contacto", b =>
                {
                    b.HasOne("Models.Entities.Pessoa", "Pessoa")
                        .WithMany()
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Models.Entities.Dador", b =>
                {
                    b.HasOne("Models.Entities.Pessoa", "Pessoa")
                        .WithOne("Dador")
                        .HasForeignKey("Models.Entities.Dador", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Models.Entities.Medico", b =>
                {
                    b.HasOne("Models.Entities.Pessoa", "Pessoa")
                        .WithOne("Medico")
                        .HasForeignKey("Models.Entities.Medico", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Models.Entities.Paciente", b =>
                {
                    b.HasOne("Models.Entities.Hospital", "Hospital")
                        .WithMany("Pacientes")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Pessoa", "Pessoa")
                        .WithOne("Paciente")
                        .HasForeignKey("Models.Entities.Paciente", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Models.Entities.Pedido", b =>
                {
                    b.HasOne("Models.Entities.Hospital", "Hospital")
                        .WithMany("Pedidos")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Hospital");
                });

            modelBuilder.Entity("Models.Entities.Pessoa", b =>
                {
                    b.HasOne("Models.Entities.Endereco", "Endereco")
                        .WithMany("Pessoas")
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Entities.Naturalidade", null)
                        .WithMany("Pessoas")
                        .HasForeignKey("NaturalidadeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Endereco");
                });

            modelBuilder.Entity("Models.Entities.Saida", b =>
                {
                    b.HasOne("Models.Entities.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pedido");
                });

            modelBuilder.Entity("Models.Entities.Stock", b =>
                {
                    b.HasOne("Models.Entities.Saida", "Saida")
                        .WithOne("Stock")
                        .HasForeignKey("Models.Entities.Stock", "SaidaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Saida");
                });

            modelBuilder.Entity("Models.Entities.Tecnico", b =>
                {
                    b.HasOne("Models.Entities.Pessoa", "Pessoa")
                        .WithOne("Tecnico")
                        .HasForeignKey("Models.Entities.Tecnico", "PessoaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pessoa");
                });

            modelBuilder.Entity("Models.Entities.Endereco", b =>
                {
                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Models.Entities.Hospital", b =>
                {
                    b.Navigation("Pacientes");

                    b.Navigation("Pedidos");
                });

            modelBuilder.Entity("Models.Entities.Naturalidade", b =>
                {
                    b.Navigation("Pessoas");
                });

            modelBuilder.Entity("Models.Entities.Pessoa", b =>
                {
                    b.Navigation("Dador");

                    b.Navigation("Medico");

                    b.Navigation("Paciente");

                    b.Navigation("Tecnico");
                });

            modelBuilder.Entity("Models.Entities.Saida", b =>
                {
                    b.Navigation("Stock");
                });
#pragma warning restore 612, 618
        }
    }
}
